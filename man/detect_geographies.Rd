% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_geographies.R
\name{detect_geographies}
\alias{detect_geographies}
\title{Convert messy text and email data into standardized geographies such as countries, country codes, and continents.}
\usage{
detect_geographies(
  data,
  id,
  input,
  output = c("country", "iso_2", "iso_3", "flag", "continent", "region", "sub_region",
    "int_region", "country_chinese", "country_russian", "country_french",
    "country_spanish", "country_arabic"),
  email = FALSE,
  cities = TRUE,
  denonyms = TRUE
)
}
\arguments{
\item{data}{A data frame or data frame extension (e.g. a tibble).}

\item{id}{A numeric or character vector unique to each entry.}

\item{input}{Character vector of text data that includes the name of cities, states, 
and/or countries that will be standardized into country names or country codes. If multiple countries are detected, they will be separated by the "|" symbol.}

\item{output}{Output column. Options include 'country', 'iso2', 'iso3', 'flag', 'continent', 'region', 'sub_region', 'int_region', 'country_arabic', 'country_chinese', 'country_french', 'country_russian', and 'country_spanish'.}

\item{email}{Character vector of email or email domain information. Defaults to FALSE}

\item{cities}{Optional argument to detect major cities in each country. Defaults to TRUE.}

\item{denonyms}{Optional argument to detect denonyms of inhabitants of each country. Defaults to TRUE.}
}
\description{
This function standardizes messy text data that contains city, region, and/or country names 
as well as email domains into standardized geographic entities. The detect_geographies() function 
relies on a "funnel matching" method that unnests text and then reiterates over n-grams, matching 
all words sequences from n to n = 1 without much use of regular expressions or text cleaning. 
Currently, the function offers 14 output types including countries, continents, flag emojis, and seven languages.
}
\examples{

library(tidyverse)
library(diverstidy)
data(github_users)

classified_by_text <- github_users \%>\%
  detect_geographies(login, location, "country", email)

}
